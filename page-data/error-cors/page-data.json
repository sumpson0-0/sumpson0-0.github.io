{"componentChunkName":"component---src-templates-post-tsx","path":"/error-cors/","result":{"data":{"markdownRemark":{"html":"<p>CORS에 대해 알기 위해서는 동일 출처 정책(SOP)을 알고 넘어가야 한다.<br>\n이게 뭔가 싶어도 조금만 더 글을 읽어보자.</p>\n<h1 id=\"동일-출처-정책sop과-cors\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%9D%BC-%EC%B6%9C%EC%B2%98-%EC%A0%95%EC%B1%85sop%EA%B3%BC-cors\" aria-label=\"동일 출처 정책sop과 cors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동일 출처 정책(SOP)과 CORS</h1>\n<br />\n<p>우리가 <code class=\"language-text\">&lt;script&gt;</code>내에서 보내는 HTTP 요청(XMLHttpRequest와 Fetch API 등)은 <strong>서로의 출처가 동일한 경우에만 리소스 공유를 허용하는 정책</strong>을 따른다. </p>\n<p>이를 <strong>동일 출처 정책(Same-Origin-Policy)</strong>이라고 부르는데, 이 정책을 따름으로써 잠재적으로 해로울 수 있는 문서를 분리하여 공격받을 수 있는 경로를 줄일 수 있게 되는 것이다.</p>\n<br />\n<p>여기서 말하는 <strong>동일한 출처</strong>란, <strong>두 URL의 프로토콜, 호스트, 포트</strong>(명시한 경우)<strong>가 모두 같은 경우</strong>를 말한다.</p>\n<p>아래의 예시를 통해 동일 출처 여부를 판별해보자.</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th>성공/실패</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span style=\"color:blue\"><a href=\"http://store.company.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://store.company.com</a></span>/dir2/other.html</td>\n<td>성공</td>\n<td>경로만 다름</td>\n</tr>\n<tr>\n<td><span style=\"color:blue\"><a href=\"http://store.company.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://store.company.com</a></span>/dir/inner/another.html</td>\n<td>성공</td>\n<td>경로만 다름</td>\n</tr>\n<tr>\n<td><span style=\"color:red\">https</span>://store.company.com/secure.html</td>\n<td>실패</td>\n<td>프로토콜 다름</td>\n</tr>\n<tr>\n<td>http://<span style=\"color:red\">news.company.com</span> /dir/other.html</td>\n<td>실패</td>\n<td>호스트다름</td>\n</tr>\n<tr>\n<td><a href=\"http://store.company.com:\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://store.company.com:</a><span style=\"color:red\">81</span>/dir/etc.html</td>\n<td>실패</td>\n<td>포트 다름 (80이 기본)</td>\n</tr>\n</tbody>\n</table>\n<p>그렇다면 <strong>다른 출처의 리소스를 가져올 수 있는 방법</strong>은 없을까?</p>\n<br/>\n<p>웹에서는 동일 출처 정책을 우선시하지만 <strong>출처가 달라도 특정 조항을 지켰을 경우 리소스 공유가 가능</strong>하도록 하는데, 그중 하나가 바로 <strong>CORS</strong>다. </p>\n<p>즉, <strong>동일 출처 정책을 벗어난 URL에서 리소스 공유를 요청해도 CORS 정책을 지킨 응답을 반환받기만 한다면 리소스 공유가 가능</strong>하다는 것이다.</p>\n<br />\n<h1 id=\"cors-정책을-지킨-응답을-얻는-방법\" style=\"position:relative;\"><a href=\"#cors-%EC%A0%95%EC%B1%85%EC%9D%84-%EC%A7%80%ED%82%A8-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%96%BB%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"cors 정책을 지킨 응답을 얻는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CORS 정책을 지킨 응답을 얻는 방법</h1>\n<br />\n<p>프론트엔드 단에서 개발을 하다 보면 한 번쯤 마주하게 되는 다음의 에러(🤦🏻‍♀️)는 두 URL의 출처가 다른 상태에서 CORS 정책까지 위반했을 경우 나타나는 것이다. </p>\n<blockquote>\n<p>🚨<span style=\"color:red\">Access to XMLHttpRequest at 'Request URL' from origin 'Origin' has been blocked by CORS policy: No 'Access-Control-Allow-Origin' header is present on the requested resource.</span> 🚨</p>\n</blockquote>\n<br />\n<p>이제 이 <strong>지긋지긋한 CORS 에러와 이별할 수 있는 방법</strong>을 알아보자.🤚🏻🤚🏻</p>\n<br />\n<h2 id=\"서버에서-해결하는-방법근본적인-해결책\" style=\"position:relative;\"><a href=\"#%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EA%B7%BC%EB%B3%B8%EC%A0%81%EC%9D%B8-%ED%95%B4%EA%B2%B0%EC%B1%85\" aria-label=\"서버에서 해결하는 방법근본적인 해결책 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버에서 해결하는 방법(근본적인 해결책)</h2>\n<br />\n<h3 id=\"1-서버측에서-응답-헤더에-access-control-allow-origin을-설정한다\" style=\"position:relative;\"><a href=\"#1-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%97%90%EC%84%9C-%EC%9D%91%EB%8B%B5-%ED%97%A4%EB%8D%94%EC%97%90-access-control-allow-origin%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C%EB%8B%A4\" aria-label=\"1 서버측에서 응답 헤더에 access control allow origin을 설정한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 서버측에서 응답 헤더에 'Access-Control-Allow-Origin'을 설정한다.</h3>\n<br />\n<p>서버는 ‘Access-Control-Allow-Origin’에 허용할 출처(origin)를 입력하고 이를 응답 헤더에 넣음으로써 CORS 정책을 허용할 수 있도록 한다.</p>\n<p> <strong>‘Access-Control-Allow-Origin’</strong>은 <strong>CORS 정책에 허용할 출처를 명시하는 헤더</strong>이다. 리소스 접근을 허용할 특정 출처를 입력하거나 (*)를 사용하여 모든 출처를 허용할 수 있다. </p>\n<p>이후 서버에서 ‘Access-Control-Allow-Origin’를 담은 응답 헤더를 브라우저로 반환하면, 브라우저는 응답 헤더에 있는 ‘Access-Control-Allow-Origin’과 자신이 요청 시 보냈던 'Origin'을 비교해 이 응답이 유효한지 판별한다. 유효하다고 판별했을 경우 CORS 에러 없이 성공적으로 리소스를 공유 받을 수 있다. </p>\n<p>여기서 우리는 <strong>CORS 정책의 위반 여부를 판단하는 것은 서버가 아닌 브라우저</strong>라는 중요한 사실을 알 수 있다.</p>\n<p>백엔드 개발자와 작업을 하는 경우라면  ‘Access-Control-Allow-Origin’ 설정을 요청하면 되지만, 제공되는 API를 사용하여 개발하는 (본인 같은) 경우에는 서버 측에 '내 Origin도 Access-Control-Allow-Origin에 넣어주세요.' 할 수 없어 당장 사용할 수 없는 방법이었다.😅</p>\n<br/>\n<h2 id=\"프론트엔드에서-해결하는-방법\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"프론트엔드에서 해결하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프론트엔드에서 해결하는 방법</h2>\n<p>사실상 프론트엔드 개발자들이 CORS 에러를 가장 많이 마주할 것이라고 생각한다. (실제로도 그렇다고.)  그렇다면 서버 측에 직접 요청이 불가할 불가할 경우 (본인 포함) 프론트엔드 측에서 쓸 수 있는 해결책에는 어떤 것들이 있을까.</p>\n<br/>\n<h3 id=\"1-외부-요청을-가능하게-해주는-플러그인-설치\" style=\"position:relative;\"><a href=\"#1-%EC%99%B8%EB%B6%80-%EC%9A%94%EC%B2%AD%EC%9D%84-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C-%ED%95%B4%EC%A3%BC%EB%8A%94-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98\" aria-label=\"1 외부 요청을 가능하게 해주는 플러그인 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 외부 요청을 가능하게 해주는 플러그인 설치.</h3>\n<br/>\n<p><strong>크롬</strong>의 경우 응답 헤더에  <strong>Access-Control-Allow-Origin' : * 를 설정해 주는 확장 프로그램이 존재</strong>한다. 이를 설치하여 사용하면 해당 플러그인이 설치된 크롬 브라우저에 한해서 CORS 에러 없이 리소스를 공유 받을 수 있다.</p>\n<p>구글에 CORS 플러그인을 치면 다양한 것들이 나오니 원하는 것으로 사용하자.</p>\n<p>(본인은 Moesif CORS를 사용해본 경험이 있다.)</p>\n<br/>\n<p><strong>문제점</strong></p>\n<ul>\n<li>해당 플러그인이 설치된 크롬 브라우저에 한해서만 리소스 공유 가능한 <strong>임시 방편</strong>이다.</li>\n</ul>\n<br/>\n<h3 id=\"2-proxy-설정\" style=\"position:relative;\"><a href=\"#2-proxy-%EC%84%A4%EC%A0%95\" aria-label=\"2 proxy 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Proxy 설정</h3>\n<br/>\n<p>Proxy는 '대리'라는 의미를 가지고 있는데, 여기서 Proxy는 클라이언트와 백엔드 서버의 중간 다리 역할을 한다.\n클라이언트 입장에서 Proxy는 원격 서버처럼 동작하고, 백엔드 서버 입장에서 Proxy는 클라이언트처럼 동작한다고 인식하게 된다. </p>\n<br/>\n<p>이전에는 클라이언트 측에서 백엔드 서버 측에 직접적으로 리소스 공유를 요청했다면, Proxy 설정 시 클라이언트에서 Proxy 서버를 통해 백엔드 서버로 요청을 보내게 된다. 이후 서버에서 다시 Proxy 서버를 거쳐 브라우저로 응답을 반환한다. <strong>CORS 정책을 우회하여 리소스를 공유 받을 수 있는 것</strong>이다.</p>\n<p><img src=\"/38f3c6522c9becd94e58106c0d3f62e2/screenshot.gif\">\n출처 : <a href=\"https://en.wikipedia.org/wiki/Proxy_server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Proxy_server</a> </p>\n<br/>\n<p>기본적으로 <strong>Proxy를 설정하는 방법</strong>은 <strong>Webpack Dev Server 혹은 http-proxy-middleware를 사용</strong>하는 것이다. (Webpack Dev Server 역시 내부적으로 http-proxy-middleware를 사용하여 백엔드 서버에 Proxy 한다고 하니, 둘 중 무엇을 사용해도 무방해 보인다.)</p>\n<br/>\n<p>두 가지 모두 매뉴얼에 방법이 잘 나와 있기에 부족한 설명 대신 링크를 첨부한다.</p>\n<p>📎<a href=\"https://webpack.js.org/configuration/dev-server/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Webpack Dev Server</a>\n📎<a href=\"https://github.com/chimurai/http-proxy-middleware#options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http-proxy-middleware</a></p>\n<br/>\n<p><strong>CRA(Create-React-App)를 이용해 만든 프로젝트의 경우</strong>에는 <strong>package.json에 \"proxy\"를 입력만 하면 간편하게 설정이 가능</strong>하니 이를 활용하자. </p>\n<p>본인의 경우 CRA를 통해 프로젝트를 생성했기 때문에 package.json으로 설정을 진행했다.<br>\n(📎<a href=\"https://create-react-app.dev/docs/proxying-api-requests-in-development/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">create-react-app proxying</a>)</p>\n<br/>\n<p>예) api url이 <a href=\"http://localhost:3000/api/recommend%22%EC%9D%B8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000/api/recommend\"인</a> 경우 CRA Proxy 설정법</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// package.json</span>\n<span class=\"token string\">\"proxy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:3000\"</span> <span class=\"token comment\">//1. proxy에 Origin 입력</span>\n\n<span class=\"token comment\">// api.js</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>api<span class=\"token operator\">/</span>recommend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2. url에서 Origin을 제외한 나머지 주소를 입력하여 요청</span></code></pre></div>\n<br/>\n<p><strong>문제점</strong></p>\n<ul>\n<li>중간단계가 있기 때문에 속도가 느려지는 단점이 있다.</li>\n<li>로컬 개발 환경에서만 적용이 가능하다.</li>\n</ul>\n<br/>\n<p><strong>내가 직면한 문제</strong></p>\n<p>로컬 환경에서 Proxy를 설정했을 때는 문제없이 작동하던 웹이, AWS S3로 배포를 진행하자 또다시 CORS 에러를 송출(🤦🏻‍♀️)하는 상황이 발생했다. </p>\n<br/>\n<p>무엇이 문제였을까?</p>\n<br/>\n<p>Proxy를 통해 설정한 것은 개발 서버이기 때문에 배포 대상이 되는 환경에서는 사용할 수 없다. 배포 시 build를 하게 되면 단순 static 파일로 변환이 되기 때문이다.</p>\n<br/>\n<p>이를 해결하기 위해서는 배포할 서버에 별도로 웹서버를 구성해야 하고 필요에 따라서 Proxy 설정도 추가해 줘야 한다.</p>\n<p>(여기서 막히는 바람에 1차 실패..🤦🏻‍♀️)</p>\n<br/>\n<h3 id=\"3-서버를-구축하여-서버간-통신으로-외부-api에-데이터-요청\" style=\"position:relative;\"><a href=\"#3-%EC%84%9C%EB%B2%84%EB%A5%BC-%EA%B5%AC%EC%B6%95%ED%95%98%EC%97%AC-%EC%84%9C%EB%B2%84%EA%B0%84-%ED%86%B5%EC%8B%A0%EC%9C%BC%EB%A1%9C-%EC%99%B8%EB%B6%80-api%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9A%94%EC%B2%AD\" aria-label=\"3 서버를 구축하여 서버간 통신으로 외부 api에 데이터 요청 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 서버를 구축하여 서버간 통신으로 외부 API에 데이터 요청</h3>\n<br/>\n<p>본인의 경우 로컬 환경에서 개발한 프로젝트를 포트폴리오 용으로 사용해야 했기 때문에 가급적이면 배포를 하고 싶었다. 그런데 위에서 언급한 대로 build된 환경에서는 proxy를 사용할 수 없어 또다시 CORS 에러를 보게 된 상황에 놓인 것이다.</p>\n<br/>\n<p>여기서 배포를 포기해야 하나 싶었지만 어딘가 돌파구가 있지 않겠냐는 마음으로 구글링을 하고 (또 하고..) 또 해서 서버에서 외부 API로 요청하는 방법이 있다는 사실을 알게 되었다.</p>\n<br/>\n<p>클라이언트-서버 간의 통신은 브라우저에서 CORS 정책을 확인하지만, 서버 간 통신은 브라우저가 개입하지 않는다. 즉, CORS 정책에 영향을 받지 않고 데이터를 받아올 수 있다.</p>\n<br/>\n<p><strong>백엔드 서버를 구축하여 서버 간 통신으로 리소스 공유를 받은 다음, 백엔드 서버의 응답 헤더에 'Access-Control-Allow-Origin'을 직접 설정한다. 그리고 클라이언트 측에서 백엔드 서버로 데이터를 요청하면 리소스를 공유 받을 수 있다.</strong></p>\n<br/>\n<p>(현재 서버를 구축하는 방법으로 CORS 해결을 시도하는 단계에 있다.🏃🏻‍♀️)</p>\n<br/>\n<h1 id=\"글을-마치며\" style=\"position:relative;\"><a href=\"#%EA%B8%80%EC%9D%84-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"글을 마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글을 마치며</h1>\n<p>최근 프로젝트에서뿐 아니라 프론트엔드 개발을 시작하고 얼마 지나지 않았을 때부터 CORS 에러를 계속 봐왔다. 처음 CORS 에러에 직면했을 때는 개발을 시작한 지 얼마 지나지 않은 상태였기에 얼마나 당황스러웠는지 모른다. 당시 처음부터 CORS의 개념을 짚어가기엔 개발에 대한 지식이 많이 부족했기에 (지금도 부족하지만) 엄두가 나지 않아 우회할 수 있는 방법을 우선적으로 찾았던 것 같다.</p>\n<br/>\n<p>시간이 지나 처음보다 개발에 대한 시야가 넓어지게 되면서 CORS에 대해서 제대로 알아보고 싶다는 생각이 들어 이렇게 짚어보게 되었다. 아직 전부를 안다고 할 수는 없지만 CORS가 어떤 것이고 왜 이런 문제가 발생했는지 이해할 수 있어 유익한 시간이었다.</p>\n<br/>\n<p>지금 공부한 내용이 앞으로의 개발에 조금이나마 도움이 되길 바라며 글을 마친다.</p>\n<br/>\n<hr>\n<h2 id=\"참조\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EC%A1%B0\" aria-label=\"참조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참조</h2>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/Security/Same-origin_policy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">동일 출처 정책 - MDN</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/CORS\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">교차 출처 리소스 공유(CORS)- MDN</a></p>\n<p><a href=\"https://react.vlpt.us/redux-middleware/09-cors-and-proxy.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CORS 와 Webpack DevServer Proxy</a></p>\n<p><a href=\"https://evan-moon.github.io/2020/05/21/about-cors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CORS는 왜 이렇게 우리를 힘들게 하는걸까?</a></p>","excerpt":"CORS에 대해 알기 위해서는 동일 출처 정책(SOP)을 알고 넘어가야 한다. 이게 뭔가 싶어도 조금만 더 글을 읽어보자. 동일 출처 정책(SOP)과 CORS 우리가 내에서 보내는 HTTP 요청(XMLHttpRequest와 Fetch API 등)은 …","tableOfContents":"<ul>\n<li><a href=\"/error-cors/#%EB%8F%99%EC%9D%BC-%EC%B6%9C%EC%B2%98-%EC%A0%95%EC%B1%85sop%EA%B3%BC-cors\">동일 출처 정책(SOP)과 CORS</a></li>\n<li>\n<p><a href=\"/error-cors/#cors-%EC%A0%95%EC%B1%85%EC%9D%84-%EC%A7%80%ED%82%A8-%EC%9D%91%EB%8B%B5%EC%9D%84-%EC%96%BB%EB%8A%94-%EB%B0%A9%EB%B2%95\">CORS 정책을 지킨 응답을 얻는 방법</a></p>\n<ul>\n<li>\n<p><a href=\"/error-cors/#%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EA%B7%BC%EB%B3%B8%EC%A0%81%EC%9D%B8-%ED%95%B4%EA%B2%B0%EC%B1%85\">서버에서 해결하는 방법(근본적인 해결책)</a></p>\n<ul>\n<li><a href=\"/error-cors/#1-%EC%84%9C%EB%B2%84%EC%B8%A1%EC%97%90%EC%84%9C-%EC%9D%91%EB%8B%B5-%ED%97%A4%EB%8D%94%EC%97%90-access-control-allow-origin%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%9C%EB%8B%A4\">1. 서버측에서 응답 헤더에 'Access-Control-Allow-Origin'을 설정한다.</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/error-cors/#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EC%97%90%EC%84%9C-%ED%95%B4%EA%B2%B0%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">프론트엔드에서 해결하는 방법</a></p>\n<ul>\n<li><a href=\"/error-cors/#1-%EC%99%B8%EB%B6%80-%EC%9A%94%EC%B2%AD%EC%9D%84-%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C-%ED%95%B4%EC%A3%BC%EB%8A%94-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EC%84%A4%EC%B9%98\">1. 외부 요청을 가능하게 해주는 플러그인 설치.</a></li>\n<li><a href=\"/error-cors/#2-proxy-%EC%84%A4%EC%A0%95\">2. Proxy 설정</a></li>\n<li><a href=\"/error-cors/#3-%EC%84%9C%EB%B2%84%EB%A5%BC-%EA%B5%AC%EC%B6%95%ED%95%98%EC%97%AC-%EC%84%9C%EB%B2%84%EA%B0%84-%ED%86%B5%EC%8B%A0%EC%9C%BC%EB%A1%9C-%EC%99%B8%EB%B6%80-api%EC%97%90-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9A%94%EC%B2%AD\">3. 서버를 구축하여 서버간 통신으로 외부 API에 데이터 요청</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/error-cors/#%EA%B8%80%EC%9D%84-%EB%A7%88%EC%B9%98%EB%A9%B0\">글을 마치며</a></p>\n<ul>\n<li><a href=\"/error-cors/#%EC%B0%B8%EC%A1%B0\">참조</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/error-cors/"},"frontmatter":{"title":"CORS 에러와 이별하기","date":"Feb 25, 2021","tags":["Error","CORS"],"keywords":["Sumlog","Sumin Kim"],"update":"Jan 01, 0001"}}},"pageContext":{"slug":"/error-cors/","series":[],"lastmod":"2021-02-25"}},"staticQueryHashes":["2027115977","694178885"]}